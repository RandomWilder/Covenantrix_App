name: Build and Release Covenantrix

on:
  push:
    tags: ['v*']
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create GitHub release'
        required: false
        default: false
        type: boolean

# Add permissions for the workflow
permissions:
  contents: write
  actions: read
  checks: write

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            platform: win
            arch: x64
            python_url: https://www.python.org/ftp/python/3.11.6/python-3.11.6-embed-amd64.zip
            python_exe: python.exe
            artifact_pattern: "*.exe"
          - os: macos-latest
            platform: mac
            arch: x64
            python_exe: bin/python
            artifact_pattern: "*.dmg"
            
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Node dependencies
      run: npm ci
      
    - name: Create Python Distribution (Windows)
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        set -e  # Exit immediately if any command fails
        
        echo "Creating Windows Python distribution..."
        mkdir -p dist/python-dist
        
        # Download embedded Python
        echo "Downloading Python embed..."
        curl -L -o python-embed.zip ${{ matrix.python_url }} || { echo "❌ Failed to download Python embed"; exit 1; }
        
        echo "Extracting Python embed..."
        unzip python-embed.zip -d dist/python-dist/ || { echo "❌ Failed to extract Python embed"; exit 1; }
        
        # Verify Python was extracted
        if [ ! -f "dist/python-dist/python.exe" ]; then
          echo "❌ Python executable not found after extraction"
          ls -la dist/python-dist/
          exit 1
        fi
        
        # Fix Python path file to enable site-packages
        echo "import sys; import os; sys.path.append(os.path.join(os.path.dirname(__file__), 'Lib', 'site-packages'))" > dist/python-dist/sitecustomize.py
        
        # Uncomment the import site line in python311._pth
        sed -i 's/#import site/import site/' dist/python-dist/python311._pth || { echo "❌ Failed to modify python311._pth"; exit 1; }
        
        # Create Lib and site-packages directories
        mkdir -p dist/python-dist/Lib/site-packages
        
        # Download get-pip.py
        echo "Downloading get-pip.py..."
        curl -L https://bootstrap.pypa.io/get-pip.py -o get-pip.py || { echo "❌ Failed to download get-pip.py"; exit 1; }
        
        # Install pip with proper paths
        echo "Installing pip..."
        dist/python-dist/python.exe get-pip.py --target dist/python-dist/Lib/site-packages --no-warn-script-location || { echo "❌ Failed to install pip"; exit 1; }
        
        # Test pip installation
        echo "Testing pip installation..."
        dist/python-dist/python.exe -c "import pip; print('Pip version:', pip.__version__)" || { echo "❌ Pip test failed"; exit 1; }
        
        # Install required packages
        echo "Installing required packages..."
        dist/python-dist/python.exe -m pip install --target dist/python-dist/Lib/site-packages --no-warn-script-location -r backend/requirements.txt || { echo "❌ Failed to install packages"; exit 1; }
        
        echo "✅ Windows Python distribution created successfully"
        
    - name: Create Python Distribution (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        echo "Creating macOS Python distribution..."
        python3 -m venv dist/python-dist
        source dist/python-dist/bin/activate
        
        # Upgrade pip
        pip install --upgrade pip
        
        # Install required packages
        pip install -r backend/requirements.txt
        
        # Make the distribution relocatable
        # Replace absolute paths with relative ones
        find dist/python-dist -name "*.py" -type f -exec sed -i '' 's|'"$(pwd)"'/dist/python-dist|.|g' {} \; || true
        
        echo "macOS Python distribution created successfully"
        
    - name: Verify Python Distribution
      shell: bash
      run: |
        echo "Verifying Python distribution..."
        
        # CRITICAL: Ensure Python distribution exists and is valid
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          if [ ! -f "dist/python-dist/python.exe" ]; then
            echo "❌ CRITICAL ERROR: Windows Python executable not found!"
            exit 1
          fi
          
          echo "Python version:"
          dist/python-dist/python.exe --version || { echo "❌ Python executable failed!"; exit 1; }
          
          echo "Testing package imports:"
          dist/python-dist/python.exe -c "import fastapi; print('FastAPI version:', fastapi.__version__)" || { echo "❌ FastAPI import failed!"; exit 1; }
          dist/python-dist/python.exe -c "import uvicorn; print('Uvicorn imported successfully')" || { echo "❌ Uvicorn import failed!"; exit 1; }
          dist/python-dist/python.exe -c "import pydantic; print('Pydantic version:', pydantic.__version__)" || { echo "❌ Pydantic import failed!"; exit 1; }
          
          # Check distribution size
          DIST_SIZE=$(du -sb dist/python-dist | cut -f1)
          MIN_SIZE=50000000  # 50MB minimum
          if [ "$DIST_SIZE" -lt "$MIN_SIZE" ]; then
            echo "❌ CRITICAL ERROR: Python distribution too small ($DIST_SIZE bytes < $MIN_SIZE bytes)"
            echo "Python distribution contents:"
            ls -la dist/python-dist/
            exit 1
          fi
          echo "✅ Windows Python distribution validated: ${DIST_SIZE} bytes"
          
        else
          if [ ! -f "dist/python-dist/bin/python" ]; then
            echo "❌ CRITICAL ERROR: macOS Python executable not found!"
            exit 1
          fi
          
          echo "Python version:"
          dist/python-dist/bin/python --version || { echo "❌ Python executable failed!"; exit 1; }
          
          echo "Testing package imports:"
          dist/python-dist/bin/python -c "import fastapi, uvicorn, pydantic; print('All packages imported successfully')" || { echo "❌ Package import failed!"; exit 1; }
          echo "✅ macOS Python distribution validated"
        fi
        
        echo "Python distribution verification completed"
        
    - name: Test Backend Script
      shell: bash
      run: |
        echo "Testing backend script..."
        
        # Start backend in background
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          dist/python-dist/python.exe backend/main.py &
        else
          dist/python-dist/bin/python backend/main.py &
        fi
        
        BACKEND_PID=$!
        echo "Backend started with PID: $BACKEND_PID"
        
        # Wait for backend to start
        echo "Waiting for backend to start..."
        for i in {1..30}; do
          if curl -s http://127.0.0.1:8000/health > /dev/null 2>&1; then
            echo "Backend is responding!"
            break
          fi
          echo "Attempt $i/30: Backend not ready yet..."
          sleep 2
        done
        
        # Test the health endpoint
        echo "Testing health endpoint..."
        curl -s http://127.0.0.1:8000/health | head -c 200
        
        # Stop backend
        kill $BACKEND_PID || true
        sleep 2
        
        echo "Backend test completed"
        
    - name: Build Electron App
      run: |
        echo "Building Electron application for ${{ matrix.platform }}..."
        npm run package:${{ matrix.platform }}
      env:
        ELECTRON_BUILDER_NO_PUBLISH: true
        
    - name: List build output
      shell: bash
      run: |
        echo "Build output contents:"
        ls -la dist/release/ 2>/dev/null || echo "No release directory found"
        find dist/release/ -type f \( -name "*.exe" -o -name "*.dmg" -o -name "*.AppImage" \) 2>/dev/null | head -10 || echo "No build artifacts found"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: covenantrix-${{ matrix.platform }}-${{ matrix.arch }}
        path: dist/release/${{ matrix.artifact_pattern }}
        retention-days: 30
        if-no-files-found: error
        
  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    # Add explicit permissions for release job
    permissions:
      contents: write
      actions: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
        
    - name: Display artifact structure
      run: |
        echo "Downloaded artifacts:"
        find artifacts/ -type f 2>/dev/null | head -20 || echo "No artifacts found"
        echo "Artifact details:"
        ls -la artifacts/ 2>/dev/null || echo "No artifacts directory"
        
    - name: Prepare release files
      run: |
        echo "Preparing release files..."
        mkdir -p release-files
        
        # Copy all executable and DMG files to release directory
        find artifacts/ -name "*.exe" -exec cp {} release-files/ \; 2>/dev/null || echo "No .exe files found"
        find artifacts/ -name "*.dmg" -exec cp {} release-files/ \; 2>/dev/null || echo "No .dmg files found"
        
        echo "Release files prepared:"
        ls -la release-files/ 2>/dev/null || echo "No release files"
        
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        name: Covenantrix ${{ github.ref_name }}
        draft: false
        prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}
        generate_release_notes: true
        files: release-files/*
        fail_on_unmatched_files: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}